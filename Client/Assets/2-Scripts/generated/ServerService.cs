// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ServerService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface ServerService : Ice.Object, ServerServiceOperations_, ServerServiceOperationsNC_
                {
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_ServerService_getServerInfo(es.upm.fi.rmi.ServerInfo ret__);
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface ServerServicePrx : Ice.ObjectPrx
                {
                    es.upm.fi.rmi.ServerInfo getServerInfo();

                    es.upm.fi.rmi.ServerInfo getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_ServerService_getServerInfo> begin_getServerInfo();

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_ServerService_getServerInfo> begin_getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_getServerInfo(Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    es.upm.fi.rmi.ServerInfo end_getServerInfo(Ice.AsyncResult r__);
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface ServerServiceOperations_
                {
                    es.upm.fi.rmi.ServerInfo getServerInfo(Ice.Current current__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface ServerServiceOperationsNC_
                {
                    es.upm.fi.rmi.ServerInfo getServerInfo();
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public sealed class ServerServicePrxHelper : Ice.ObjectPrxHelperBase, ServerServicePrx
                {
                    #region Synchronous operations

                    public es.upm.fi.rmi.ServerInfo getServerInfo()
                    {
                        return this.getServerInfo(null, false);
                    }

                    public es.upm.fi.rmi.ServerInfo getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return this.getServerInfo(ctx__, true);
                    }

                    private es.upm.fi.rmi.ServerInfo getServerInfo(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        checkTwowayOnly__(__getServerInfo_name);
                        return end_getServerInfo(begin_getServerInfo(context__, explicitCtx__, true, null, null));
                    }

                    #endregion

                    #region Asynchronous operations

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_ServerService_getServerInfo> begin_getServerInfo()
                    {
                        return begin_getServerInfo(null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_ServerService_getServerInfo> begin_getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_getServerInfo(ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_getServerInfo(Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_getServerInfo(null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_getServerInfo(ctx__, true, false, cb__, cookie__);
                    }

                    private const string __getServerInfo_name = "getServerInfo";

                    public es.upm.fi.rmi.ServerInfo end_getServerInfo(Ice.AsyncResult r__)
                    {
                        IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __getServerInfo_name);
                        try
                        {
                            if(!outAsync__.wait())
                            {
                                try
                                {
                                    outAsync__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            es.upm.fi.rmi.ServerInfo ret__;
                            IceInternal.BasicStream is__ = outAsync__.startReadParams();
                            ret__ = null;
                            ret__ = es.upm.fi.rmi.ServerInfo.read__(is__, ret__);
                            outAsync__.endReadParams();
                            return ret__;
                        }
                        finally
                        {
                            outAsync__.cacheMessageBuffers();
                        }
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_ServerService_getServerInfo> begin_getServerInfo(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        checkAsyncTwowayOnly__(__getServerInfo_name);
                        IceInternal.TwowayOutgoingAsync<es.upm.fi.rmi.Callback_ServerService_getServerInfo> result__ =  getTwowayOutgoingAsync<es.upm.fi.rmi.Callback_ServerService_getServerInfo>(__getServerInfo_name, getServerInfo_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__getServerInfo_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            result__.writeEmptyParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void getServerInfo_completed__(Ice.AsyncResult r__, es.upm.fi.rmi.Callback_ServerService_getServerInfo cb__, Ice.ExceptionCallback excb__)
                    {
                        es.upm.fi.rmi.ServerInfo ret__;
                        try
                        {
                            ret__ = end_getServerInfo(r__);
                        }
                        catch(Ice.Exception ex__)
                        {
                            if(excb__ != null)
                            {
                                excb__(ex__);
                            }
                            return;
                        }
                        if(cb__ != null)
                        {
                            cb__(ret__);
                        }
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static ServerServicePrx checkedCast(Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        ServerServicePrx r = b as ServerServicePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            ServerServicePrxHelper h = new ServerServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static ServerServicePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        ServerServicePrx r = b as ServerServicePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            ServerServicePrxHelper h = new ServerServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static ServerServicePrx checkedCast(Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                ServerServicePrxHelper h = new ServerServicePrxHelper();
                                h.copyFrom__(bb);
                                return h;
                            }
                        }
                        catch(Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static ServerServicePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                ServerServicePrxHelper h = new ServerServicePrxHelper();
                                h.copyFrom__(bb);
                                return h;
                            }
                        }
                        catch(Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static ServerServicePrx uncheckedCast(Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        ServerServicePrx r = b as ServerServicePrx;
                        if(r == null)
                        {
                            ServerServicePrxHelper h = new ServerServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static ServerServicePrx uncheckedCast(Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        ServerServicePrxHelper h = new ServerServicePrxHelper();
                        h.copyFrom__(bb);
                        return h;
                    }

                    public static readonly string[] ids__ =
                    {
                        "::Ice::Object",
                        "::es::upm::fi::rmi::ServerService"
                    };

                    public static string ice_staticId()
                    {
                        return ids__[1];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write__(IceInternal.BasicStream os__, ServerServicePrx v__)
                    {
                        os__.writeProxy(v__);
                    }

                    public static ServerServicePrx read__(IceInternal.BasicStream is__)
                    {
                        Ice.ObjectPrx proxy = is__.readProxy();
                        if(proxy != null)
                        {
                            ServerServicePrxHelper result = new ServerServicePrxHelper();
                            result.copyFrom__(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public abstract class ServerServiceDisp_ : Ice.ObjectImpl, ServerService
                {
                    #region Slice operations

                    public es.upm.fi.rmi.ServerInfo getServerInfo()
                    {
                        return getServerInfo(Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract es.upm.fi.rmi.ServerInfo getServerInfo(Ice.Current current__);

                    #endregion

                    #region Slice type-related members

                    public static new readonly string[] ids__ = 
                    {
                        "::Ice::Object",
                        "::es::upm::fi::rmi::ServerService"
                    };

                    public override bool ice_isA(string s)
                    {
                        return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override bool ice_isA(string s, Ice.Current current__)
                    {
                        return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids()
                    {
                        return ids__;
                    }

                    public override string[] ice_ids(Ice.Current current__)
                    {
                        return ids__;
                    }

                    public override string ice_id()
                    {
                        return ids__[1];
                    }

                    public override string ice_id(Ice.Current current__)
                    {
                        return ids__[1];
                    }

                    public static new string ice_staticId()
                    {
                        return ids__[1];
                    }

                    #endregion

                    #region Operation dispatch

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus getServerInfo___(ServerService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        inS__.readEmptyParams();
                        es.upm.fi.rmi.ServerInfo ret__ = obj__.getServerInfo(current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        es.upm.fi.rmi.ServerInfo.write__(os__, ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    private static string[] all__ =
                    {
                        "getServerInfo",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return getServerInfo___(this, inS__, current__);
                            }
                            case 1:
                            {
                                return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                            }
                            case 2:
                            {
                                return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                            }
                            case 3:
                            {
                                return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                            }
                            case 4:
                            {
                                return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                            }
                        }

                        _System.Diagnostics.Debug.Assert(false);
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    #endregion

                    #region Marshaling support

                    protected override void writeImpl__(IceInternal.BasicStream os__)
                    {
                        os__.startWriteSlice(ice_staticId(), -1, true);
                        os__.endWriteSlice();
                    }

                    protected override void readImpl__(IceInternal.BasicStream is__)
                    {
                        is__.startReadSlice();
                        is__.endReadSlice();
                    }

                    #endregion
                }
            }
        }
    }
}
