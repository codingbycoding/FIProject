// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `DsaService.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace IceCompactId
{
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
#if !SILVERLIGHT
                [_System.Serializable]
#endif
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial class DsaException : es.upm.fi.rmi.PaseoException
                {
                    #region Constructors

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public DsaException()
                    {
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public DsaException(_System.Exception ex__) : base(ex__)
                    {
                    }
#if !SILVERLIGHT

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public DsaException(_System.Runtime.Serialization.SerializationInfo info__, _System.Runtime.Serialization.StreamingContext context__) : base(info__, context__)
                    {
                    }
#endif

                    #endregion

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override string ice_name()
                    {
                        return "es::upm::fi::rmi::DsaException";
                    }

                    #region Object members

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override int GetHashCode()
                    {
                        int h__ = base.GetHashCode();
                        IceInternal.HashUtil.hashAdd(ref h__, "::es::upm::fi::rmi::DsaException");
                        return h__;
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override bool Equals(object other__)
                    {
                        if(other__ == null)
                        {
                            return false;
                        }
                        if(object.ReferenceEquals(this, other__))
                        {
                            return true;
                        }
                        DsaException o__ = other__ as DsaException;
                        if(o__ == null)
                        {
                            return false;
                        }
                        if(!base.Equals(other__))
                        {
                            return false;
                        }
                        return true;
                    }

                    #endregion

                    #region Comparison members

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public static bool operator==(DsaException lhs__, DsaException rhs__)
                    {
                        return Equals(lhs__, rhs__);
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public static bool operator!=(DsaException lhs__, DsaException rhs__)
                    {
                        return !Equals(lhs__, rhs__);
                    }

                    #endregion

                    #region Marshaling support

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    protected override void writeImpl__(IceInternal.BasicStream os__)
                    {
                        os__.startWriteSlice("::es::upm::fi::rmi::DsaException", -1, false);
                        os__.endWriteSlice();
                        base.writeImpl__(os__);
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    protected override void readImpl__(IceInternal.BasicStream is__)
                    {
                        is__.startReadSlice();
                        is__.endReadSlice();
                        base.readImpl__(is__);
                    }

                    #endregion
                }

                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1032")]
#if !SILVERLIGHT
                [_System.Serializable]
#endif
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial class HasNoDsa : es.upm.fi.rmi.DsaException
                {
                    #region Constructors

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public HasNoDsa()
                    {
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public HasNoDsa(_System.Exception ex__) : base(ex__)
                    {
                    }
#if !SILVERLIGHT

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public HasNoDsa(_System.Runtime.Serialization.SerializationInfo info__, _System.Runtime.Serialization.StreamingContext context__) : base(info__, context__)
                    {
                    }
#endif

                    #endregion

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override string ice_name()
                    {
                        return "es::upm::fi::rmi::HasNoDsa";
                    }

                    #region Object members

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override int GetHashCode()
                    {
                        int h__ = base.GetHashCode();
                        IceInternal.HashUtil.hashAdd(ref h__, "::es::upm::fi::rmi::HasNoDsa");
                        return h__;
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public override bool Equals(object other__)
                    {
                        if(other__ == null)
                        {
                            return false;
                        }
                        if(object.ReferenceEquals(this, other__))
                        {
                            return true;
                        }
                        HasNoDsa o__ = other__ as HasNoDsa;
                        if(o__ == null)
                        {
                            return false;
                        }
                        if(!base.Equals(other__))
                        {
                            return false;
                        }
                        return true;
                    }

                    #endregion

                    #region Comparison members

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public static bool operator==(HasNoDsa lhs__, HasNoDsa rhs__)
                    {
                        return Equals(lhs__, rhs__);
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    public static bool operator!=(HasNoDsa lhs__, HasNoDsa rhs__)
                    {
                        return !Equals(lhs__, rhs__);
                    }

                    #endregion

                    #region Marshaling support

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    protected override void writeImpl__(IceInternal.BasicStream os__)
                    {
                        os__.startWriteSlice("::es::upm::fi::rmi::HasNoDsa", -1, false);
                        os__.endWriteSlice();
                        base.writeImpl__(os__);
                    }

                    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                    protected override void readImpl__(IceInternal.BasicStream is__)
                    {
                        is__.startReadSlice();
                        is__.endReadSlice();
                        base.readImpl__(is__);
                    }

                    #endregion
                }

                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
                [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
                public partial interface DsaService : Ice.Object, DsaServiceOperations_, DsaServiceOperationsNC_
                {
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsReady();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaSetMaxLoad();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaSetLoadFactor();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaSetMemLevel();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaSetAvailableLoad();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaSetCurrLoad();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaCheckHealth2DC(bool ret__);

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_DsaInit2DC();

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public delegate void Callback_DsaService_Ping();
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface DsaServicePrx : Ice.ObjectPrx
                {
                    void DsReady(es.upm.fi.rmi.ServerInfo info);

                    void DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsReady> begin_DsReady(es.upm.fi.rmi.ServerInfo info);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsReady> begin_DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsReady(es.upm.fi.rmi.ServerInfo info, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsReady(Ice.AsyncResult r__);

                    void DsaSetMaxLoad(long DsaId, int Load);

                    void DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> begin_DsaSetMaxLoad(long DsaId, int Load);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> begin_DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaSetMaxLoad(long DsaId, int Load, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaSetMaxLoad(Ice.AsyncResult r__);

                    void DsaSetLoadFactor(long DsaId, long Factor);

                    void DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> begin_DsaSetLoadFactor(long DsaId, long Factor);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> begin_DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaSetLoadFactor(long DsaId, long Factor, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaSetLoadFactor(Ice.AsyncResult r__);

                    void DsaSetMemLevel(long DsaId, int MemLevelHealth);

                    void DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> begin_DsaSetMemLevel(long DsaId, int MemLevelHealth);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaSetMemLevel(Ice.AsyncResult r__);

                    void DsaSetAvailableLoad(long DsaId, int AvailableLoad);

                    void DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaSetAvailableLoad(Ice.AsyncResult r__);

                    void DsaSetCurrLoad(long DsaId, int CurrLoad);

                    void DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> begin_DsaSetCurrLoad(long DsaId, int CurrLoad);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> begin_DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaSetCurrLoad(long DsaId, int CurrLoad, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaSetCurrLoad(Ice.AsyncResult r__);

                    bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType);

                    bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    bool end_DsaCheckHealth2DC(Ice.AsyncResult r__);

                    void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP);

                    void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_DsaInit2DC(Ice.AsyncResult r__);

                    void Ping();

                    void Ping(_System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_Ping> begin_Ping();

                    Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_Ping> begin_Ping(_System.Collections.Generic.Dictionary<string, string> ctx__);

                    Ice.AsyncResult begin_Ping(Ice.AsyncCallback cb__, object cookie__);

                    Ice.AsyncResult begin_Ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

                    void end_Ping(Ice.AsyncResult r__);
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface DsaServiceOperations_
                {
                    void DsReady(es.upm.fi.rmi.ServerInfo info, Ice.Current current__);

                    void DsaSetMaxLoad(long DsaId, int Load, Ice.Current current__);

                    void DsaSetLoadFactor(long DsaId, long Factor, Ice.Current current__);

                    void DsaSetMemLevel(long DsaId, int MemLevelHealth, Ice.Current current__);

                    void DsaSetAvailableLoad(long DsaId, int AvailableLoad, Ice.Current current__);

                    void DsaSetCurrLoad(long DsaId, int CurrLoad, Ice.Current current__);

                    bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, Ice.Current current__);

                    void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, Ice.Current current__);

                    void Ping(Ice.Current current__);
                }

                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public interface DsaServiceOperationsNC_
                {
                    void DsReady(es.upm.fi.rmi.ServerInfo info);

                    void DsaSetMaxLoad(long DsaId, int Load);

                    void DsaSetLoadFactor(long DsaId, long Factor);

                    void DsaSetMemLevel(long DsaId, int MemLevelHealth);

                    void DsaSetAvailableLoad(long DsaId, int AvailableLoad);

                    void DsaSetCurrLoad(long DsaId, int CurrLoad);

                    bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType);

                    void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP);

                    void Ping();
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public sealed class DsaServicePrxHelper : Ice.ObjectPrxHelperBase, DsaServicePrx
                {
                    #region Synchronous operations

                    public void DsReady(es.upm.fi.rmi.ServerInfo info)
                    {
                        this.DsReady(info, null, false);
                    }

                    public void DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsReady(info, ctx__, true);
                    }

                    private void DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsReady(begin_DsReady(info, context__, explicitCtx__, true, null, null));
                    }

                    public bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType)
                    {
                        return this.DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, null, false);
                    }

                    public bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return this.DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, ctx__, true);
                    }

                    private bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        checkTwowayOnly__(__DsaCheckHealth2DC_name);
                        return end_DsaCheckHealth2DC(begin_DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP)
                    {
                        this.DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, null, false);
                    }

                    public void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, ctx__, true);
                    }

                    private void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaInit2DC(begin_DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaSetAvailableLoad(long DsaId, int AvailableLoad)
                    {
                        this.DsaSetAvailableLoad(DsaId, AvailableLoad, null, false);
                    }

                    public void DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaSetAvailableLoad(DsaId, AvailableLoad, ctx__, true);
                    }

                    private void DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaSetAvailableLoad(begin_DsaSetAvailableLoad(DsaId, AvailableLoad, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaSetCurrLoad(long DsaId, int CurrLoad)
                    {
                        this.DsaSetCurrLoad(DsaId, CurrLoad, null, false);
                    }

                    public void DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaSetCurrLoad(DsaId, CurrLoad, ctx__, true);
                    }

                    private void DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaSetCurrLoad(begin_DsaSetCurrLoad(DsaId, CurrLoad, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaSetLoadFactor(long DsaId, long Factor)
                    {
                        this.DsaSetLoadFactor(DsaId, Factor, null, false);
                    }

                    public void DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaSetLoadFactor(DsaId, Factor, ctx__, true);
                    }

                    private void DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaSetLoadFactor(begin_DsaSetLoadFactor(DsaId, Factor, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaSetMaxLoad(long DsaId, int Load)
                    {
                        this.DsaSetMaxLoad(DsaId, Load, null, false);
                    }

                    public void DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaSetMaxLoad(DsaId, Load, ctx__, true);
                    }

                    private void DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaSetMaxLoad(begin_DsaSetMaxLoad(DsaId, Load, context__, explicitCtx__, true, null, null));
                    }

                    public void DsaSetMemLevel(long DsaId, int MemLevelHealth)
                    {
                        this.DsaSetMemLevel(DsaId, MemLevelHealth, null, false);
                    }

                    public void DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.DsaSetMemLevel(DsaId, MemLevelHealth, ctx__, true);
                    }

                    private void DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_DsaSetMemLevel(begin_DsaSetMemLevel(DsaId, MemLevelHealth, context__, explicitCtx__, true, null, null));
                    }

                    public void Ping()
                    {
                        this.Ping(null, false);
                    }

                    public void Ping(_System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        this.Ping(ctx__, true);
                    }

                    private void Ping(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitCtx__)
                    {
                        end_Ping(begin_Ping(context__, explicitCtx__, true, null, null));
                    }

                    #endregion

                    #region Asynchronous operations

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsReady> begin_DsReady(es.upm.fi.rmi.ServerInfo info)
                    {
                        return begin_DsReady(info, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsReady> begin_DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsReady(info, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsReady(es.upm.fi.rmi.ServerInfo info, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsReady(info, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsReady(info, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsReady_name = "DsReady";

                    public void end_DsReady(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsReady_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsReady> begin_DsReady(es.upm.fi.rmi.ServerInfo info, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsReady> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsReady>(__DsReady_name, DsReady_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsReady_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            es.upm.fi.rmi.ServerInfo.write__(os__, info);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsReady_completed__(es.upm.fi.rmi.Callback_DsaService_DsReady cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType)
                    {
                        return begin_DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaCheckHealth2DC_name = "DsaCheckHealth2DC";

                    public bool end_DsaCheckHealth2DC(Ice.AsyncResult r__)
                    {
                        IceInternal.OutgoingAsync outAsync__ = IceInternal.OutgoingAsync.check(r__, this, __DsaCheckHealth2DC_name);
                        try
                        {
                            if(!outAsync__.wait())
                            {
                                try
                                {
                                    outAsync__.throwUserException();
                                }
                                catch(Ice.UserException ex__)
                                {
                                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                                }
                            }
                            bool ret__;
                            IceInternal.BasicStream is__ = outAsync__.startReadParams();
                            ret__ = is__.readBool();
                            outAsync__.endReadParams();
                            return ret__;
                        }
                        finally
                        {
                            outAsync__.cacheMessageBuffers();
                        }
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> begin_DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        checkAsyncTwowayOnly__(__DsaCheckHealth2DC_name);
                        IceInternal.TwowayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC> result__ =  getTwowayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC>(__DsaCheckHealth2DC_name, DsaCheckHealth2DC_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaCheckHealth2DC_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(MaxLoad);
                            os__.writeInt(AvailableLoad);
                            os__.writeLong(LoadFactor);
                            os__.writeInt(MemLevelHealth);
                            os__.writeInt(DsaType);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaCheckHealth2DC_completed__(Ice.AsyncResult r__, es.upm.fi.rmi.Callback_DsaService_DsaCheckHealth2DC cb__, Ice.ExceptionCallback excb__)
                    {
                        bool ret__;
                        try
                        {
                            ret__ = end_DsaCheckHealth2DC(r__);
                        }
                        catch(Ice.Exception ex__)
                        {
                            if(excb__ != null)
                            {
                                excb__(ex__);
                            }
                            return;
                        }
                        if(cb__ != null)
                        {
                            cb__(ret__);
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP)
                    {
                        return begin_DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaInit2DC_name = "DsaInit2DC";

                    public void end_DsaInit2DC(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaInit2DC_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> begin_DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaInit2DC>(__DsaInit2DC_name, DsaInit2DC_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaInit2DC_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(MaxLoad);
                            os__.writeInt(AvailableLoad);
                            os__.writeLong(LoadFactor);
                            os__.writeInt(MemLevelHealth);
                            os__.writeInt(DsaType);
                            os__.writeString(DsIP);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaInit2DC_completed__(es.upm.fi.rmi.Callback_DsaService_DsaInit2DC cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad)
                    {
                        return begin_DsaSetAvailableLoad(DsaId, AvailableLoad, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaSetAvailableLoad(DsaId, AvailableLoad, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetAvailableLoad(DsaId, AvailableLoad, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetAvailableLoad(DsaId, AvailableLoad, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaSetAvailableLoad_name = "DsaSetAvailableLoad";

                    public void end_DsaSetAvailableLoad(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaSetAvailableLoad_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> begin_DsaSetAvailableLoad(long DsaId, int AvailableLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad>(__DsaSetAvailableLoad_name, DsaSetAvailableLoad_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaSetAvailableLoad_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(AvailableLoad);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaSetAvailableLoad_completed__(es.upm.fi.rmi.Callback_DsaService_DsaSetAvailableLoad cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> begin_DsaSetCurrLoad(long DsaId, int CurrLoad)
                    {
                        return begin_DsaSetCurrLoad(DsaId, CurrLoad, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> begin_DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaSetCurrLoad(DsaId, CurrLoad, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaSetCurrLoad(long DsaId, int CurrLoad, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetCurrLoad(DsaId, CurrLoad, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetCurrLoad(DsaId, CurrLoad, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaSetCurrLoad_name = "DsaSetCurrLoad";

                    public void end_DsaSetCurrLoad(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaSetCurrLoad_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> begin_DsaSetCurrLoad(long DsaId, int CurrLoad, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad>(__DsaSetCurrLoad_name, DsaSetCurrLoad_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaSetCurrLoad_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(CurrLoad);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaSetCurrLoad_completed__(es.upm.fi.rmi.Callback_DsaService_DsaSetCurrLoad cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> begin_DsaSetLoadFactor(long DsaId, long Factor)
                    {
                        return begin_DsaSetLoadFactor(DsaId, Factor, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> begin_DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaSetLoadFactor(DsaId, Factor, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaSetLoadFactor(long DsaId, long Factor, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetLoadFactor(DsaId, Factor, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetLoadFactor(DsaId, Factor, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaSetLoadFactor_name = "DsaSetLoadFactor";

                    public void end_DsaSetLoadFactor(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaSetLoadFactor_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> begin_DsaSetLoadFactor(long DsaId, long Factor, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor>(__DsaSetLoadFactor_name, DsaSetLoadFactor_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaSetLoadFactor_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeLong(Factor);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaSetLoadFactor_completed__(es.upm.fi.rmi.Callback_DsaService_DsaSetLoadFactor cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> begin_DsaSetMaxLoad(long DsaId, int Load)
                    {
                        return begin_DsaSetMaxLoad(DsaId, Load, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> begin_DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaSetMaxLoad(DsaId, Load, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaSetMaxLoad(long DsaId, int Load, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetMaxLoad(DsaId, Load, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetMaxLoad(DsaId, Load, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaSetMaxLoad_name = "DsaSetMaxLoad";

                    public void end_DsaSetMaxLoad(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaSetMaxLoad_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> begin_DsaSetMaxLoad(long DsaId, int Load, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad>(__DsaSetMaxLoad_name, DsaSetMaxLoad_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaSetMaxLoad_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(Load);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaSetMaxLoad_completed__(es.upm.fi.rmi.Callback_DsaService_DsaSetMaxLoad cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> begin_DsaSetMemLevel(long DsaId, int MemLevelHealth)
                    {
                        return begin_DsaSetMemLevel(DsaId, MemLevelHealth, null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_DsaSetMemLevel(DsaId, MemLevelHealth, ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetMemLevel(DsaId, MemLevelHealth, null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_DsaSetMemLevel(DsaId, MemLevelHealth, ctx__, true, false, cb__, cookie__);
                    }

                    private const string __DsaSetMemLevel_name = "DsaSetMemLevel";

                    public void end_DsaSetMemLevel(Ice.AsyncResult r__)
                    {
                        end__(r__, __DsaSetMemLevel_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> begin_DsaSetMemLevel(long DsaId, int MemLevelHealth, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel>(__DsaSetMemLevel_name, DsaSetMemLevel_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__DsaSetMemLevel_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            IceInternal.BasicStream os__ = result__.startWriteParams(Ice.FormatType.DefaultFormat);
                            os__.writeLong(DsaId);
                            os__.writeInt(MemLevelHealth);
                            result__.endWriteParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void DsaSetMemLevel_completed__(es.upm.fi.rmi.Callback_DsaService_DsaSetMemLevel cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_Ping> begin_Ping()
                    {
                        return begin_Ping(null, false, false, null, null);
                    }

                    public Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_Ping> begin_Ping(_System.Collections.Generic.Dictionary<string, string> ctx__)
                    {
                        return begin_Ping(ctx__, true, false, null, null);
                    }

                    public Ice.AsyncResult begin_Ping(Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_Ping(null, false, false, cb__, cookie__);
                    }

                    public Ice.AsyncResult begin_Ping(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        return begin_Ping(ctx__, true, false, cb__, cookie__);
                    }

                    private const string __Ping_name = "Ping";

                    public void end_Ping(Ice.AsyncResult r__)
                    {
                        end__(r__, __Ping_name);
                    }

                    private Ice.AsyncResult<es.upm.fi.rmi.Callback_DsaService_Ping> begin_Ping(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, bool synchronous__, Ice.AsyncCallback cb__, object cookie__)
                    {
                        IceInternal.OnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_Ping> result__ = getOnewayOutgoingAsync<es.upm.fi.rmi.Callback_DsaService_Ping>(__Ping_name, Ping_completed__, cookie__);
                        if(cb__ != null)
                        {
                            result__.whenCompletedWithAsyncCallback(cb__);
                        }
                        try
                        {
                            result__.prepare(__Ping_name, Ice.OperationMode.Normal, ctx__, explicitContext__, synchronous__);
                            result__.writeEmptyParams();
                            result__.invoke();
                        }
                        catch(Ice.Exception ex__)
                        {
                            result__.abort(ex__);
                        }
                        return result__;
                    }

                    private void Ping_completed__(es.upm.fi.rmi.Callback_DsaService_Ping cb__)
                    {
                        if(cb__ != null)
                        {
                            cb__();
                        }
                    }

                    #endregion

                    #region Checked and unchecked cast operations

                    public static DsaServicePrx checkedCast(Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        DsaServicePrx r = b as DsaServicePrx;
                        if((r == null) && b.ice_isA(ice_staticId()))
                        {
                            DsaServicePrxHelper h = new DsaServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static DsaServicePrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        DsaServicePrx r = b as DsaServicePrx;
                        if((r == null) && b.ice_isA(ice_staticId(), ctx))
                        {
                            DsaServicePrxHelper h = new DsaServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static DsaServicePrx checkedCast(Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId()))
                            {
                                DsaServicePrxHelper h = new DsaServicePrxHelper();
                                h.copyFrom__(bb);
                                return h;
                            }
                        }
                        catch(Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static DsaServicePrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        try
                        {
                            if(bb.ice_isA(ice_staticId(), ctx))
                            {
                                DsaServicePrxHelper h = new DsaServicePrxHelper();
                                h.copyFrom__(bb);
                                return h;
                            }
                        }
                        catch(Ice.FacetNotExistException)
                        {
                        }
                        return null;
                    }

                    public static DsaServicePrx uncheckedCast(Ice.ObjectPrx b)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        DsaServicePrx r = b as DsaServicePrx;
                        if(r == null)
                        {
                            DsaServicePrxHelper h = new DsaServicePrxHelper();
                            h.copyFrom__(b);
                            r = h;
                        }
                        return r;
                    }

                    public static DsaServicePrx uncheckedCast(Ice.ObjectPrx b, string f)
                    {
                        if(b == null)
                        {
                            return null;
                        }
                        Ice.ObjectPrx bb = b.ice_facet(f);
                        DsaServicePrxHelper h = new DsaServicePrxHelper();
                        h.copyFrom__(bb);
                        return h;
                    }

                    public static readonly string[] ids__ =
                    {
                        "::Ice::Object",
                        "::es::upm::fi::rmi::DsaService"
                    };

                    public static string ice_staticId()
                    {
                        return ids__[1];
                    }

                    #endregion

                    #region Marshaling support

                    public static void write__(IceInternal.BasicStream os__, DsaServicePrx v__)
                    {
                        os__.writeProxy(v__);
                    }

                    public static DsaServicePrx read__(IceInternal.BasicStream is__)
                    {
                        Ice.ObjectPrx proxy = is__.readProxy();
                        if(proxy != null)
                        {
                            DsaServicePrxHelper result = new DsaServicePrxHelper();
                            result.copyFrom__(proxy);
                            return result;
                        }
                        return null;
                    }

                    #endregion
                }
            }
        }
    }
}

namespace es
{
    namespace upm
    {
        namespace fi
        {
            namespace rmi
            {
                [_System.Runtime.InteropServices.ComVisible(false)]
                [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.6.3")]
                public abstract class DsaServiceDisp_ : Ice.ObjectImpl, DsaService
                {
                    #region Slice operations

                    public void DsReady(es.upm.fi.rmi.ServerInfo info)
                    {
                        DsReady(info, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsReady(es.upm.fi.rmi.ServerInfo info, Ice.Current current__);

                    public void DsaSetMaxLoad(long DsaId, int Load)
                    {
                        DsaSetMaxLoad(DsaId, Load, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaSetMaxLoad(long DsaId, int Load, Ice.Current current__);

                    public void DsaSetLoadFactor(long DsaId, long Factor)
                    {
                        DsaSetLoadFactor(DsaId, Factor, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaSetLoadFactor(long DsaId, long Factor, Ice.Current current__);

                    public void DsaSetMemLevel(long DsaId, int MemLevelHealth)
                    {
                        DsaSetMemLevel(DsaId, MemLevelHealth, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaSetMemLevel(long DsaId, int MemLevelHealth, Ice.Current current__);

                    public void DsaSetAvailableLoad(long DsaId, int AvailableLoad)
                    {
                        DsaSetAvailableLoad(DsaId, AvailableLoad, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaSetAvailableLoad(long DsaId, int AvailableLoad, Ice.Current current__);

                    public void DsaSetCurrLoad(long DsaId, int CurrLoad)
                    {
                        DsaSetCurrLoad(DsaId, CurrLoad, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaSetCurrLoad(long DsaId, int CurrLoad, Ice.Current current__);

                    public bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType)
                    {
                        return DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract bool DsaCheckHealth2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, Ice.Current current__);

                    public void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP)
                    {
                        DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void DsaInit2DC(long DsaId, int MaxLoad, int AvailableLoad, long LoadFactor, int MemLevelHealth, int DsaType, string DsIP, Ice.Current current__);

                    public void Ping()
                    {
                        Ping(Ice.ObjectImpl.defaultCurrent);
                    }

                    public abstract void Ping(Ice.Current current__);

                    #endregion

                    #region Slice type-related members

                    public static new readonly string[] ids__ = 
                    {
                        "::Ice::Object",
                        "::es::upm::fi::rmi::DsaService"
                    };

                    public override bool ice_isA(string s)
                    {
                        return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override bool ice_isA(string s, Ice.Current current__)
                    {
                        return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
                    }

                    public override string[] ice_ids()
                    {
                        return ids__;
                    }

                    public override string[] ice_ids(Ice.Current current__)
                    {
                        return ids__;
                    }

                    public override string ice_id()
                    {
                        return ids__[1];
                    }

                    public override string ice_id(Ice.Current current__)
                    {
                        return ids__[1];
                    }

                    public static new string ice_staticId()
                    {
                        return ids__[1];
                    }

                    #endregion

                    #region Operation dispatch

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsReady___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        es.upm.fi.rmi.ServerInfo info;
                        info = null;
                        info = es.upm.fi.rmi.ServerInfo.read__(is__, info);
                        inS__.endReadParams();
                        obj__.DsReady(info, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaSetMaxLoad___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int Load;
                        DsaId = is__.readLong();
                        Load = is__.readInt();
                        inS__.endReadParams();
                        obj__.DsaSetMaxLoad(DsaId, Load, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaSetLoadFactor___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        long Factor;
                        DsaId = is__.readLong();
                        Factor = is__.readLong();
                        inS__.endReadParams();
                        obj__.DsaSetLoadFactor(DsaId, Factor, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaSetMemLevel___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int MemLevelHealth;
                        DsaId = is__.readLong();
                        MemLevelHealth = is__.readInt();
                        inS__.endReadParams();
                        obj__.DsaSetMemLevel(DsaId, MemLevelHealth, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaSetAvailableLoad___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int AvailableLoad;
                        DsaId = is__.readLong();
                        AvailableLoad = is__.readInt();
                        inS__.endReadParams();
                        obj__.DsaSetAvailableLoad(DsaId, AvailableLoad, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaSetCurrLoad___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int CurrLoad;
                        DsaId = is__.readLong();
                        CurrLoad = is__.readInt();
                        inS__.endReadParams();
                        obj__.DsaSetCurrLoad(DsaId, CurrLoad, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaCheckHealth2DC___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int MaxLoad;
                        int AvailableLoad;
                        long LoadFactor;
                        int MemLevelHealth;
                        int DsaType;
                        DsaId = is__.readLong();
                        MaxLoad = is__.readInt();
                        AvailableLoad = is__.readInt();
                        LoadFactor = is__.readLong();
                        MemLevelHealth = is__.readInt();
                        DsaType = is__.readInt();
                        inS__.endReadParams();
                        bool ret__ = obj__.DsaCheckHealth2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, current__);
                        IceInternal.BasicStream os__ = inS__.startWriteParams__(Ice.FormatType.DefaultFormat);
                        os__.writeBool(ret__);
                        inS__.endWriteParams__(true);
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus DsaInit2DC___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        IceInternal.BasicStream is__ = inS__.startReadParams();
                        long DsaId;
                        int MaxLoad;
                        int AvailableLoad;
                        long LoadFactor;
                        int MemLevelHealth;
                        int DsaType;
                        string DsIP;
                        DsaId = is__.readLong();
                        MaxLoad = is__.readInt();
                        AvailableLoad = is__.readInt();
                        LoadFactor = is__.readLong();
                        MemLevelHealth = is__.readInt();
                        DsaType = is__.readInt();
                        DsIP = is__.readString();
                        inS__.endReadParams();
                        obj__.DsaInit2DC(DsaId, MaxLoad, AvailableLoad, LoadFactor, MemLevelHealth, DsaType, DsIP, current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
                    public static Ice.DispatchStatus Ping___(DsaService obj__, IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        Ice.ObjectImpl.checkMode__(Ice.OperationMode.Normal, current__.mode);
                        inS__.readEmptyParams();
                        obj__.Ping(current__);
                        inS__.writeEmptyParams__();
                        return Ice.DispatchStatus.DispatchOK;
                    }

                    private static string[] all__ =
                    {
                        "DsReady",
                        "DsaCheckHealth2DC",
                        "DsaInit2DC",
                        "DsaSetAvailableLoad",
                        "DsaSetCurrLoad",
                        "DsaSetLoadFactor",
                        "DsaSetMaxLoad",
                        "DsaSetMemLevel",
                        "Ping",
                        "ice_id",
                        "ice_ids",
                        "ice_isA",
                        "ice_ping"
                    };

                    public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
                    {
                        int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
                        if(pos < 0)
                        {
                            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                        }

                        switch(pos)
                        {
                            case 0:
                            {
                                return DsReady___(this, inS__, current__);
                            }
                            case 1:
                            {
                                return DsaCheckHealth2DC___(this, inS__, current__);
                            }
                            case 2:
                            {
                                return DsaInit2DC___(this, inS__, current__);
                            }
                            case 3:
                            {
                                return DsaSetAvailableLoad___(this, inS__, current__);
                            }
                            case 4:
                            {
                                return DsaSetCurrLoad___(this, inS__, current__);
                            }
                            case 5:
                            {
                                return DsaSetLoadFactor___(this, inS__, current__);
                            }
                            case 6:
                            {
                                return DsaSetMaxLoad___(this, inS__, current__);
                            }
                            case 7:
                            {
                                return DsaSetMemLevel___(this, inS__, current__);
                            }
                            case 8:
                            {
                                return Ping___(this, inS__, current__);
                            }
                            case 9:
                            {
                                return Ice.ObjectImpl.ice_id___(this, inS__, current__);
                            }
                            case 10:
                            {
                                return Ice.ObjectImpl.ice_ids___(this, inS__, current__);
                            }
                            case 11:
                            {
                                return Ice.ObjectImpl.ice_isA___(this, inS__, current__);
                            }
                            case 12:
                            {
                                return Ice.ObjectImpl.ice_ping___(this, inS__, current__);
                            }
                        }

                        _System.Diagnostics.Debug.Assert(false);
                        throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                    }

                    #endregion

                    #region Marshaling support

                    protected override void writeImpl__(IceInternal.BasicStream os__)
                    {
                        os__.startWriteSlice(ice_staticId(), -1, true);
                        os__.endWriteSlice();
                    }

                    protected override void readImpl__(IceInternal.BasicStream is__)
                    {
                        is__.startReadSlice();
                        is__.endReadSlice();
                    }

                    #endregion
                }
            }
        }
    }
}
